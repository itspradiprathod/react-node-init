Front Sample Files

# react-node-init
How to Setup React & Node JS

React

to start react project simple run below commond

npx create-react-app {appName}

// app js file
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";

import Header from './components/Header';
import Home from './components/Home';
import UserLogin from "./components/UserLogin";
import UserList from "./components/UserList";
import UserAdd from "./components/UserAdd";

function App() {
  
  return (
    <main className="">
      <Router>
        <Header />
        <div>
          <Routes>
            <Route exact path="/" element={<Home />} />
            <Route exact path="/user-login" element={<UserLogin />} />
            <Route exact path="/user-list" element={<UserList />} />
            <Route exact path="/user-add" element={<UserAdd />} />
          </Routes>
        </div>
      </Router>
    </main>
  );
}

export default App;

// Header js file

import React, { useEffect  } from "react";
import { Link } from "react-router-dom";
import Cookies from "universal-cookie";
import { useNavigate } from "react-router-dom";

function Header() {

  const history = useNavigate();

  const cookies = new Cookies();
  //console.log("save login token cookies >>>", cookies.get("user_auth"));

  useEffect(()=>{    
    // currently set static value but in live we get secure token from database and save it in cookie
    if(cookies.get("user_auth") === undefined || cookies.get("user_auth") !== "react@swirl.com"){
      history("/user-login");
    }
  },[])

  const logoutUser = () => {
    cookies.remove("user_auth");
    history("/user-login");
  }

  return (
    <header className="">
      <div className="d-flex align-items-center p-3 px-md-4 mb-3 bg-white border-bottom box-shadow justify-content-between">
        <h5 className="my-0 mr-md-auto font-weight-normal">React Node MySql</h5>
        <nav className="my-2 my-md-0 mr-md-3">
          <Link to="/" className="px-2 text-dark text-decoration-none">Home</Link>
          <Link to="/user-list" className="px-2 text-dark text-decoration-none">User List</Link>
          <Link to="/user-add" className="px-2 text-dark text-decoration-none">User Add</Link>          
        </nav>
        {
          (cookies.get("user_auth") !== undefined || cookies.get("user_auth") === "react@swirl.com")
          ?
            <div>
              <span>Login As : react@swirl.com</span>
              <button type="button" className="btn btn-outline-primary btn-sm ms-2" onClick={()=>logoutUser()}>Logout</button>
            </div>
          :
          <Link className="btn btn-outline-primary" to="/user-login">Login</Link>
        }
        
      </div>
    </header>
  );
}

export default Header;

// User add From

import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Cookies from "universal-cookie";
import axios from "axios";
import { useForm } from "react-hook-form";

import { API_URL } from "../config";

function UserAdd() {
  const history = useNavigate();
  const cookies = new Cookies();
  const [isLoading, setLoading] = useState(false);
  
  useEffect(()=>{
    // currently set static value but in live we get secure token from database and save it in cookie
    if(cookies.get("user_auth") === undefined || cookies.get("user_auth") !== "react@swirl.com"){
      history("/user-login");
    }
  }, []);
  
  const { register, handleSubmit, formState: { errors } } = useForm();
  //console.log("errors>>>>", errors);
  const handleFormSubmit = async(formProps) => {
    //console.log(formProps);return false;
    setLoading(true);
    await axios.post(API_URL+"/user/add", formProps)
    .then((result) => {
      setLoading(false);
      console.log("result>>>>", result);
      if(result.data.success !== undefined && result.data.success === 'valid'){        
        history("/user-list");
      } else {
        alert("Spmething went wrong, please try after some time");
      }
    })
    .catch(function(error) {
      setLoading(false);
      console.log("catch error >>>>", error);
    });
  }

  return (
    <div className="container">
      <div className="row">
        <div className="col-sm-3"></div>
        <div className="col-sm-6">
          <div className="card">
            <h5 className="card-header">
              User Add
            </h5>
            <div className="card-body">
              <form onSubmit={handleSubmit(handleFormSubmit)}>
                <div className="form-group">
                  <label htmlFor="exampleInputFname" className="form-label">First Name</label>
                  <input
                    type="text"
                    name="firstname"
                    className="form-control"
                    id="exampleInputFname"
                    placeholder="Firstname"
                    {...register('firstname', { required: "Firstname is required!",})}
                  />
                  {errors.firstname && errors.firstname.message && (
                    <small className="text-danger">{errors.firstname.message}</small>
                  )}
                </div>
                <div className="form-group">
                  <label htmlFor="exampleInputSname" className="form-label">Last Name</label>
                  <input
                    type="text"
                    name="surname"
                    className="form-control"
                    id="exampleInputSname"
                    placeholder="Surname"
                    {...register('surname', { required: "Surname is required!",})}
                  />
                  {errors.surname && errors.surname.message && (
                    <small className="text-danger">{errors.surname.message}</small>
                  )}
                </div>
                <div className="form-group">
                  <label htmlFor="exampleFormControlSelect1">Gender (Select)</label>
                  <select className="form-control" name="gender" id="exampleFormControlSelect1"
                    {...register('gender', { required: "Please Select Gender!",})}
                  >
                    <option value={'male'}>Male</option>
                    <option value={'female'}>Female</option>
                  </select>
                  {errors.gender && errors.gender.message && (
                    <small className="text-danger">{errors.gender.message}</small>
                  )}
                </div>
                <div className="mb-3">
                  <label htmlFor="exampleInputDob" className="form-label">DOB (Format : YYYY-MM-DD)</label>
                  <input
                    type="text"
                    name="dob"
                    className="form-control"
                    id="exampleInputDob"
                    placeholder="DOB (Format : YYYY-MM-DD)"
                    {...register('dob',
                      {
                        required: "DOB is required!",
                        pattern:{
                          value: /^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$/i,
                          message: "Please enter DOB in YYYY-MM-DD Format"
                        }
                      }
                    )}
                  />
                  {errors.dob && errors.dob.message && (
                    <small className="text-danger">{errors.dob.message}</small>
                  )}
                </div>
                <button type="submit" disabled={isLoading} className="btn btn-primary">{isLoading ? "Please Wait..." : "Submit"}</button>
              </form>
            </div>
          </div>
        </div> 
        <div className="col-sm-3"></div>
      </div>
           
    </div>    
  );
}

export default UserAdd;

// User List Js

import React, { useState, useEffect } from "react";
import axios from "axios";
import Cookies from "universal-cookie";
import { useNavigate } from "react-router-dom";
import { Link } from "react-router-dom";
import { API_URL } from "../config";
//console.log("API_URL>>>", API_URL);
import { ucwords, getAge } from "../function";

import maleImg from '../images/male.png';
import femaleImg from '../images/female.png';
import '../css/main.css';

function UserList() {
  const history = useNavigate();
  const [users, setUsers] = useState([]);
  const cookies = new Cookies();

  useEffect(()=>{
    // currently set static value but in live we get secure token from database and save it in cookie
    if(cookies.get("user_auth") === undefined || cookies.get("user_auth") !== "react@swirl.com"){
      history("/user-login");
    } else {
      getUsers();
    }
  }, []);

  const getUsers = async() => {
    await axios.get(API_URL+"/users")
    .then((result) => {
      //console.log("result>>>>", result);
      setUsers(result.data);
    })
    .catch(function(error) {
      console.log("catch error >>>>", error);
    });
  }
  
  //console.log("users>>>>", users);
  return (
    <div className="container mt-5">
      
      <div className="d-flex justify-content-between mb-3">
        <h5>User List</h5>
        <Link className="btn btn-outline-primary btn-sm" to="/user-add">Add New Uer</Link>
      </div>
      <div className="row">
        {
          users.length > 0
          ?
          users.map((user, index) => (
            <div className="col-sm-6 mb-2" key={"user."+user.user_id}>
              <div className="card">
                <div className="card-body">
                  <div className="row">
                    <div className="col-sm-2">
                      <img src={user.gender == "male" ? maleImg : femaleImg} alt={ucwords(user.firstname+" "+user.surname)} className="img-thumbnail profile-icon" />
                    </div>
                    <div className="col-sm-10">
                      <h5 className="card-title">{ucwords(user.firstname+" "+user.surname)}</h5>
                      <p className="card-text mb-0">Gender : {ucwords(user.gender)}</p>
                      <p className="card-text">Age : {getAge(user.dob)}</p>
                    </div>
                  </div>              
                </div>
              </div>
            </div>
          ))
          :
          <div className="col-sm-12">
            No Records Found!
          </div>    
        }
        
      </div>
      
    </div>
    
  );
}

export default UserList;


// user login js

import React, { useState, useEffect  } from "react";
import Cookies from "universal-cookie";
import { useNavigate } from "react-router-dom";
import { useForm } from "react-hook-form";


function UserLogin() {
  const history = useNavigate();
  const cookies = new Cookies();
  const [isError, setError] = useState(false);

  //console.log("save login token cookies >>>", cookies.get("user_auth"));
  useEffect(()=>{    
    // currently set static value but in live we get secure token from database and save it in cookie
    if(cookies.get("user_auth") !== undefined && cookies.get("user_auth") === "react@demo.com"){
      console.log("user auth found so redirect in to user list");
      history("/user-list");
    }
  },[]);

  const { register, handleSubmit, formState: { errors } } = useForm();
  //console.log("errors>>>>", errors);
  const handleFormSubmit = (data) => {
    //Email : react@demo.com
    //Password : Demo@123
    console.log("data>>>", data);
    
    if(data.email !== "react@demo.com"){
      setError("Warning : We couldn't locate your email address in our system");
    } else if(data.password !== "Demo@123"){
      setError("Warning : Email and Password not match!");
    } else {
      setError(false);
      cookies.set("user_auth", data.email); // currently set static value but in live we get secure token from database and save it in cookie
      history("/user-list");
    }
  }

  return (
    <div className="container">
      <div className="row">
        <div className="col-sm-3"></div>
        <div className="col-sm-6">
          <div className="card">
            <h5 className="card-header">
              Login
            </h5>
            <div className="card-body">
              <form onSubmit={handleSubmit(handleFormSubmit)}>
                {isError && (
                  <div className="alert alert-danger">{isError}</div>
                )}
                <div className="form-group">
                  <label htmlFor="exampleInputEmail1">Email address</label>
                  <input
                    type="email"
                    name="email"
                    className="form-control"
                    id="exampleInputEmail1"
                    placeholder="Email"
                    {...register('email', {
                        required: "Email is required!",
                        pattern:{
                          value: /^\S+@\S+$/i,
                          message: "Invalid Email Address"
                        }
                      }
                    )}
                  />
                  {errors.email && errors.email.message && (
                    <small className="text-danger">{errors.email.message}</small>
                  )}
                </div>
                <div className="form-group">
                  <label htmlFor="exampleInputPassword1">Password</label>
                  <input
                    type="password"
                    name="password"
                    className="form-control"
                    id="exampleInputPassword1"
                    placeholder="Password"
                    {...register('password', {
                        required: "Password is Required!",
                        minLength:{
                          value:6,
                          message: "Password must be more then 6 characters"
                        },
                        maxLength:{
                          value:12,
                          message: "Password cannot exceed more then 12 characters"
                        },
                        pattern:{
                          value: /(?=[A-Za-z0-9@#$%^&+!=]+$)^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[@#$%^&+!=])(?=.{6,}).*$/g,
                          message: "Password must be contain 1 alphabet, 1 number, 1 special character, 1 capital letter and 1 small letter"
                        }

                      }
                    )}
                  />
                  {errors.password && errors.password.message && (
                    <small className="text-danger">{errors.password.message}</small>
                  )}
                </div>
                <button type="submit" className="btn btn-primary">Submit</button>
              </form>
            </div>
          </div>
          <div className="card mt-3">
            <div className="card-body">
              <h5 className="card-title">Help Text</h5>
              <p className="card-text">Currently we are login with static data so I have store email address as token in cookies, but in live environment we get secure customer token from backend side using jwt package.</p>
              <p className="card-text">Current success login credecials is below <br />
              Email : react@demo.com <br />
              Password : Demo@123</p>
            </div>
          </div>
        </div> 
        <div className="col-sm-3"></div>
      </div>
           
    </div>    
  );
}

export default UserLogin;
